#!/usr/bin/env python3

import socket
import rospy
import signal
import sys
from std_msgs.msg import String

LOCAL_IP         = "0.0.0.0"
LOCAL_PORT       = 20001
BUFFER_SIZE      = 1024
MSG_FROM_SERVER  = "OK"
START_MSG_CLIENT = "Hello UDP server"
END_MSG_CLIENT   = "Bye UDP server"
BYTES_TO_SEND    = str.encode(MSG_FROM_SERVER)
MAX_TIMEOUT      = 20.0                              # in seconds



class UDPServer:
    def __init__(self):
        # create a datagram socket
        self.udp_server_socket = socket.socket(family = socket.AF_INET, 
                                                type = socket.SOCK_DGRAM)               
        
        # bind to address and ip
        self.udp_server_socket.bind((LOCAL_IP, LOCAL_PORT))
        signal.signal(signal.SIGINT, self.signal_handler)

        self.command = rospy.Publisher('app_command', String, queue_size = 1)


    def signal_handler(self, signal, frame):
        '''
        Deal with ctrl+C command while the server is listening
        '''

        self.udp_server_socket.close()
        sys.exit(0)


    def run(self):
        '''
        Run the server, let it listen and react to messages
        '''
        
        while not rospy.is_shutdown():

            connected_with_client = False
            
            try:
                # listen for incoming datagrams
                print("UDP server up and listening")
                bytes_address_pair = self.udp_server_socket.recvfrom(BUFFER_SIZE)
                message = bytes_address_pair[0].decode()
                
                # recieved a message from the app client
                if message == START_MSG_CLIENT:                                                    
                    address = bytes_address_pair[1]
    
                    print(f"Message from Client: {message}")
                    print(f"Client IP Address: {address}")
                    print(f"Message from server{MSG_FROM_SERVER}")
                    # sending a reply to client
                    self.udp_server_socket.sendto(BYTES_TO_SEND, address)
                    connected_with_client = True
                    self.udp_server_socket.settimeout(MAX_TIMEOUT)
                
                    while connected_with_client:
                    
                        try:
                            rx_command = self.udp_server_socket.recvfrom(BUFFER_SIZE)
                            command = rx_command[0].decode()
                            print(command)
                        
                            if command == END_MSG_CLIENT:     
                                print("Ended connection with a client on its request")
                                connected_with_client = False
                                break
                    
                            self.command.publish(command)
                    
                        except:
                            print("Ended connection with a client - time out")
                            connected_with_client = False
                        
                    self.udp_server_socket.settimeout(None)

            except:
                print("Caught an exception")
                self.udp_server_socket.close()
                sys.exit(0)



if __name__ == "__main__":
    
    rospy.init_node('udp_server')
    udp_server = UDPServer()

    try:
        udp_server.run()
    except rospy.ROSInterruptException:
        pass

