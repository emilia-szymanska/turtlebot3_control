#!/usr/bin/env python3

import rospy
from nav_msgs.msg import Odometry
from std_msgs.msg import String
from math import atan2, degrees
from tf.transformations import euler_from_quaternion

class PositionFeedback:
    def __init__(self):
        
        self.feedback_string = rospy.Publisher('position_string', String, queue_size = 1)
        self.odom_listener   = rospy.Subscriber('odom', Odometry, self.odom_callback)

    
    def odom_callback(self, message):
        '''
        Convert the odometry message into a string which can be sent with a UDP
        '''

        pose = message.pose.pose.position
        q = message.pose.pose.orientation
        roll, pitch, yaw = euler_from_quaternion([q.x, q.y, q.z, q.w])
        string_message = String()
        string_message.data = "{:.2f},{:.2f},{}".format(round(pose.x, 2), round(pose.y, 2), int(round(degrees(yaw))))
        self.feedback_string.publish(string_message)


    def run(self):
        '''
        Keep the node running until interrupted
        '''
        
        while not rospy.is_shutdown():
            rospy.spin()


if __name__ == "__main__":
    
    rospy.init_node('feedback')
    feedback = PositionFeedback()

    try:
        feedback.run()
    except rospy.ROSInterruptException:
        pass

