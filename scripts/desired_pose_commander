#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import String, Bool
from math import atan2, degrees, radians, sqrt, tanh
from tf.transformations import euler_from_quaternion
from numpy import sign

DIST_PRECISION      = 0.03
ANGLE_PRECISION     = 1
BURGER_STEP_ANG_VEL = 2.84 * 0.1
BURGER_STEP_LIN_VEL = 0.22 * 0.4
TANH_PARAM          = 5

class DesiredPoseCommander:
    def __init__(self):
        
        self.commander             = rospy.Publisher('cmd_vel', Twist, queue_size = 1)
        self.desired_pose_listener = rospy.Subscriber('desired_pose', String, self.desired_pose_callback)
        self.string_feedback       = rospy.Subscriber('position_string', String, self.current_pose_callback)
        self.quit_desired          = rospy.Subscriber('quit_desired_pose', Bool, self.quit_pose_setting_callback)
        
        self.desired_x     = 0.00
        self.desired_y     = 0.00
        self.desired_theta = 0
        
        self.set_desired_pose = False
    

    def desired_pose_callback(self, message):
        '''
        Set the values of the desired position and the according
        flag to true to allow the ride
        '''

        self.set_desired_pose = True
        pose_values = message.data.split(",")
        try:
            self.desired_x      = float(pose_values[0])
            self.desired_y      = float(pose_values[1])
            self.desired_theta  = int(pose_values[2])
        except:
            print("Exception while parsing string to floats and ints")
    

    def quit_pose_setting_callback(self, message):
        '''
        Set the flag to False if there is no need to reach the
        desired position anymore
        '''

        if message.data == True:
            self.set_desired_pose = False
    
    
    def current_pose_callback(self, message):
        '''
        Convert the desired pose info into a Twist message
        accordingly to the current pose
        '''

        if self.set_desired_pose:
            pose_values   = message.data.split(",")
            current_x     = float(pose_values[0])
            current_y     = float(pose_values[1])
            current_theta = int(pose_values[2])
            
            cmd_vel = Twist()
            cmd_vel.linear.x  = 0.0
            cmd_vel.linear.y  = 0.0
            cmd_vel.linear.z  = 0.0
            cmd_vel.angular.x = 0.0
            cmd_vel.angular.y = 0.0
            cmd_vel.angular.z = 0.0
        
            dist = self.get_distance(current_x, current_y)
            
            if dist >= DIST_PRECISION:
                rot_theta = self.get_ang_distance(current_x, current_y)

                if rot_theta * current_theta >= 0:
                    ang_diff = rot_theta - current_theta
                elif rot_theta < 0 and current_theta > 0:
                    if abs(rot_theta) + abs(current_theta) > (360 - (abs(rot_theta) + abs(current_theta))):
                        ang_diff = 360 - (abs(rot_theta) + abs(current_theta))
                    else:
                        ang_diff = -(abs(rot_theta) + abs(current_theta))
                elif rot_theta > 0 and current_theta < 0:
                    if abs(rot_theta) + abs(current_theta) > (360 - (abs(rot_theta) + abs(current_theta))):
                        ang_diff = -(360 - (abs(rot_theta) + abs(current_theta)))
                    else:
                        ang_diff = abs(rot_theta) + abs(current_theta)
                elif rot_theta == current_theta:
                    ang_diff = 0


                cmd_vel.linear.x  = BURGER_STEP_LIN_VEL
                cmd_vel.angular.z = tanh(TANH_PARAM * radians(ang_diff)) * BURGER_STEP_ANG_VEL
            
            elif abs(self.desired_theta - current_theta) >= ANGLE_PRECISION:
                if self.desired_theta * current_theta >= 0:
                    ang_diff = self.desired_theta - current_theta
                elif self.desired_theta < 0 and current_theta > 0:
                    if abs(self.desired_theta) + abs(current_theta) > (360 - (abs(self.desired_theta) + abs(current_theta))):
                        ang_diff = 360 - (abs(self.desired_theta) + abs(current_theta))
                    else:
                        ang_diff = -(abs(self.desired_theta) + abs(current_theta))
                elif self.desired_theta > 0 and current_theta < 0:
                    if abs(self.desired_theta) + abs(current_theta) > (360 - (abs(self.desired_theta) + abs(current_theta))):
                        ang_diff = -(360 - (abs(self.desired_theta) + abs(current_theta)))
                    else:
                        ang_diff = abs(self.desired_theta) + abs(current_theta)
                elif self.desired_theta == current_theta:
                    ang_diff = 0

                cmd_vel.linear.x  = 0.0
                cmd_vel.angular.z = tanh(TANH_PARAM * radians(ang_diff)) * BURGER_STEP_ANG_VEL

            
            else:
                cmd_vel.linear.x  = 0.0
                cmd_vel.angular.z = 0.0


            self.commander.publish(cmd_vel)

        


    def get_distance(self, current_x, current_y):
        '''
        Calculate the distance between the desired and the current position
        '''

        distance = sqrt(pow((self.desired_x - current_x), 2) + pow((self.desired_y - current_y), 2)) 
        return distance


    def get_ang_distance(self, current_x, current_y):
        '''
        Calculate the theta that has to be set for the robot to face the 
        desired position from the current position
        '''
        
        ang_distance = degrees(atan2(self.desired_y - current_y, self.desired_x - current_x))
        return ang_distance


    def run(self):
        '''
        Keep the node running until interrupted
        '''
        
        while not rospy.is_shutdown():
            rospy.spin()


if __name__ == "__main__":
    
    rospy.init_node('pose_commander')    
    commander = DesiredPoseCommander()

    try:
        commander.run()
    except rospy.ROSInterruptException:
        pass

