#!/usr/bin/env python3

import rospy
from nav_msgs.msg import Odometry
from std_msgs.msg import String
from math import atan2, degrees

class FeedbackThread:
    def __init__(self):
        
        self.const_info = rospy.Publisher('position_string', String, queue_size = 1)
        self.listener = rospy.Subscriber('odom', Odometry, self.callback)

    
    def callback(self, message):
        '''
        Convert the odometry message into a string which can be sent with a UDP
        '''

        pose = message.pose.pose.position
        q = message.pose.pose.orientation
        theta = degrees(atan2(2.0*(q.y*q.z + q.w*q.x), q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z))
        string_message = String()
        string_message.data = f"{round(pose.x, 3)},{round(pose.y, 3)},{round(theta, 3)}"
        self.const_info.publish(string_message)


    def run(self):
        '''
        Keep the node running until interrupted
        '''
        
        while not rospy.is_shutdown():
            rospy.spin()





if __name__ == "__main__":
    
    rospy.init_node('feedback')
    
    feedback = FeedbackThread()

    try:
        feedback.run()
    except rospy.ROSInterruptException:
        pass

