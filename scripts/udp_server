#!/usr/bin/env python3

import socket
import rospy
import signal
import sys
from std_msgs.msg import String, Int64, Bool
#from UdpClientData.msg import UdpClientData

LOCAL_IP          = "0.0.0.0"
LOCAL_PORT        = 20001
BUFFER_SIZE       = 1024
MSG_FROM_SERVER   = "OK"
START_MSG_CLIENT  = "Hello UDP server"
END_MSG_CLIENT    = "Bye UDP server"
GO_TO_DESIRED_MSG = "Change to desired pose view"
GO_TO_ARROW_MSG   = "Change to arrow view"
BYTES_TO_SEND     = str.encode(MSG_FROM_SERVER)
MAX_TIMEOUT       = 20.0                              # in seconds


def close_socket_safely(socket):
    if socket is not None and socket._closed == False:
        socket.close()



class UDPServer:
    def __init__(self, ip_address = LOCAL_IP, port_nr = LOCAL_PORT):
        # create a datagram socket
        self.udp_server_socket = socket.socket(family = socket.AF_INET, 
                                                type = socket.SOCK_DGRAM)               
        self.client_address = "1.0.0.0"
        self.connected_to_client = False
        self.command_view = False
        
        # bind to address and ip
        self.udp_server_socket.bind((ip_address, port_nr))
        signal.signal(signal.SIGINT, self.signal_handler)

        self.command      = rospy.Publisher('app_command', String, queue_size = 1)
        self.desired_pose = rospy.Publisher('desired_pose', String, queue_size = 1)
        self.feedback     = rospy.Subscriber('position_string', String, self.send_feedback)


    def send_feedback(self, message):
        if self.connected_to_client:
            self.udp_server_socket.sendto(str.encode(message.data), self.client_address)


    def signal_handler(self, signal, frame):
        '''
        Deal with ctrl+C command while the server is listening
        '''

        close_socket_safely(self.udp_server_socket)
        sys.exit(0)


    def run(self):
        '''
        Run the server, let it listen and react to messages
        '''
        
        while not rospy.is_shutdown():

            self.connected_to_client = False
            
            try:
                # listen for incoming datagrams
                print("UDP server up and listening")
                bytes_address_pair = self.udp_server_socket.recvfrom(BUFFER_SIZE)
                message = bytes_address_pair[0].decode()

                # recieved a message from the app client
                if message == START_MSG_CLIENT:                                                    
                    address = bytes_address_pair[1]

                    self.client_address = address
                    
                    print(f"Message from Client: {message}")
                    print(f"Client IP Address: {address}")
                    
                    # sending a reply to client
                    self.udp_server_socket.sendto(BYTES_TO_SEND, address)
                    self.connected_to_client = True
                    self.udp_server_socket.settimeout(MAX_TIMEOUT)

                
                    while self.connected_to_client:
                    
                        try:
                            rx_command = self.udp_server_socket.recvfrom(BUFFER_SIZE)
                            command = rx_command[0].decode()
                        
                            if command == END_MSG_CLIENT:     
                                print("Ended connection with a client on its request")
                                self.connected_to_client = False
                                break
                            elif command == GO_TO_DESIRED_MSG:
                                self.command_view = True
                                self.udp_server_socket.settimeout(None)
                                while self.command_view:
                                    try:
                                        rx_command = self.udp_server_socket.recvfrom(BUFFER_SIZE)
                                        command = rx_command[0].decode()
                                        if command == GO_TO_ARROW_MSG:
                                            print("Go back to arrow commands")
                                            self.command_view = False
                                            self.udp_server_socket.settimeout(MAX_TIMEOUT)
                                            break
                                        else:
                                            print(f"RECEIVED COMMAND {command}")
                                            self.desired_pose.publish(command)
                                    except:    
                                        print("Ended command view - exception thrown")
                                        self.command_view = False
                        

                            else:
                                self.command.publish(command)
                    
                        except:
                            print("Ended connection with a client - time out")
                            self.connected_to_client = False
                        
                    self.udp_server_socket.settimeout(None)

            except Exception as e:
                print("Caught an exception: " + str(e))
                close_socket_safely(self.udp_server_socket)
                sys.exit(0)



if __name__ == "__main__":
    
    rospy.init_node('udp_server')
    
    ip = rospy.get_param('~ip', LOCAL_IP)
    port = rospy.get_param('~port', LOCAL_PORT)

    print(f'IP of the server: {ip}, PORT nr: {port}')

    udp_server = UDPServer(ip, port)

    try:
        udp_server.run()
    except rospy.ROSInterruptException:
        pass

